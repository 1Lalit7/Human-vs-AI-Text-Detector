{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"widgets":{"application/vnd.jupyter.widget-state+json":{"a1d47cc121ea4b7bae8e9cffb7f99923":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_24a142546fe9474ca48dbe21216fe361","IPY_MODEL_f6d03210b0f14b52ab703cc07fee9e11","IPY_MODEL_c4894c3da71d4777be0c9694da9620ec"],"layout":"IPY_MODEL_47c170c923a14ab2b82d1aec2407feb2"}},"24a142546fe9474ca48dbe21216fe361":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_be8a5a6f16cb42be8b61e48c5444e3cf","placeholder":"​","style":"IPY_MODEL_bff45ad726e8408c82684240230fb5c0","value":"config.json: 100%"}},"f6d03210b0f14b52ab703cc07fee9e11":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_111438b6b3a84071bbd58b331f9468cb","max":481,"min":0,"orientation":"horizontal","style":"IPY_MODEL_efa06ac1cb90402eae5cee578057b88c","value":481}},"c4894c3da71d4777be0c9694da9620ec":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e4d7c7d8810948dab2b351bf56abfa68","placeholder":"​","style":"IPY_MODEL_08076259f4414709a2d1ea9c4ff881f7","value":" 481/481 [00:00&lt;00:00, 8.53kB/s]"}},"47c170c923a14ab2b82d1aec2407feb2":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"be8a5a6f16cb42be8b61e48c5444e3cf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bff45ad726e8408c82684240230fb5c0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"111438b6b3a84071bbd58b331f9468cb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"efa06ac1cb90402eae5cee578057b88c":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"e4d7c7d8810948dab2b351bf56abfa68":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"08076259f4414709a2d1ea9c4ff881f7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"77dceaae51e543e783fc0a58c3ecb2a7":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_42f500de55b44c069e18d11f5c9d7798","IPY_MODEL_45fe8df11f9846f1b09e20f1e092f156","IPY_MODEL_230c82d510194ab4a23d826f1625495b"],"layout":"IPY_MODEL_c81487f10b8a4f5c9a2f9c852c31609e"}},"42f500de55b44c069e18d11f5c9d7798":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_f06a594ab7ac42d38582ee148e5408ae","placeholder":"​","style":"IPY_MODEL_bacef44cfb9c440b9aee4f7baeb47009","value":"model.safetensors: 100%"}},"45fe8df11f9846f1b09e20f1e092f156":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_6fd31a279eb442909c623c295be9c430","max":498818054,"min":0,"orientation":"horizontal","style":"IPY_MODEL_96ddfa741ad6415198d7806da862aad0","value":498818054}},"230c82d510194ab4a23d826f1625495b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a39235cc17c24d2f98ffbd6158d859db","placeholder":"​","style":"IPY_MODEL_e2387f166dc748c2a2c13b1e411776d0","value":" 499M/499M [00:04&lt;00:00, 129MB/s]"}},"c81487f10b8a4f5c9a2f9c852c31609e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f06a594ab7ac42d38582ee148e5408ae":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bacef44cfb9c440b9aee4f7baeb47009":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"6fd31a279eb442909c623c295be9c430":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"96ddfa741ad6415198d7806da862aad0":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"a39235cc17c24d2f98ffbd6158d859db":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e2387f166dc748c2a2c13b1e411776d0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"af095b761ed94e05b938c13c2fd1e477":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_fcd21e482f9740dca739850e2b5f49ba","IPY_MODEL_9ce6ea2cf7574499841c22a6328ac3a6","IPY_MODEL_904bf80aaab84296bc7bef1e57de521e"],"layout":"IPY_MODEL_009c47e637b944b58a194967c04cb746"}},"fcd21e482f9740dca739850e2b5f49ba":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_6481437e0cd7463983bb6919f93661ba","placeholder":"​","style":"IPY_MODEL_032369e81f2a4a1d85d4dd97129183f5","value":"tokenizer_config.json: 100%"}},"9ce6ea2cf7574499841c22a6328ac3a6":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_10d23c60cb714e6cba40c504c24ad1ec","max":25,"min":0,"orientation":"horizontal","style":"IPY_MODEL_2131eed38e01409b8e70117a08b57078","value":25}},"904bf80aaab84296bc7bef1e57de521e":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_19106763dd0a4027a9fbc74f3e85822b","placeholder":"​","style":"IPY_MODEL_d3b4cad9d6a94f90b43951c34bae82d8","value":" 25.0/25.0 [00:00&lt;00:00, 303B/s]"}},"009c47e637b944b58a194967c04cb746":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6481437e0cd7463983bb6919f93661ba":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"032369e81f2a4a1d85d4dd97129183f5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"10d23c60cb714e6cba40c504c24ad1ec":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2131eed38e01409b8e70117a08b57078":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"19106763dd0a4027a9fbc74f3e85822b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d3b4cad9d6a94f90b43951c34bae82d8":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"a6cac1947bd245379c39a2e02110752c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_19e27755e8bb465aab3d5f079aee74ff","IPY_MODEL_28b405b881e74ade941929218287a6fe","IPY_MODEL_0ba1db0439964d66a2b7b018a5d001c4"],"layout":"IPY_MODEL_234303a163bb47e18fb9484289d138b3"}},"19e27755e8bb465aab3d5f079aee74ff":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b64f2e05e84f4529aaaccdad478789f5","placeholder":"​","style":"IPY_MODEL_cac2e83e8c77402daf905266959c52d2","value":"vocab.json: 100%"}},"28b405b881e74ade941929218287a6fe":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_00ceda6cdae944fbb46b3c234180acb3","max":898823,"min":0,"orientation":"horizontal","style":"IPY_MODEL_b4600412521a464f9b092cf66d307b42","value":898823}},"0ba1db0439964d66a2b7b018a5d001c4":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_ad31b6162d7c4b8ba563498dbd1b4307","placeholder":"​","style":"IPY_MODEL_2c435adb0d9649c69130bca7b6b4b3bc","value":" 899k/899k [00:00&lt;00:00, 7.00MB/s]"}},"234303a163bb47e18fb9484289d138b3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b64f2e05e84f4529aaaccdad478789f5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"cac2e83e8c77402daf905266959c52d2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"00ceda6cdae944fbb46b3c234180acb3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"b4600412521a464f9b092cf66d307b42":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"ad31b6162d7c4b8ba563498dbd1b4307":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2c435adb0d9649c69130bca7b6b4b3bc":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"12fad43267fd480ab09fccf13c0c2e29":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_7b3bd15996fa446db312112b1725fbc5","IPY_MODEL_bf257cd38f094360abd47558ea198cf1","IPY_MODEL_77801f5049674a0bbc84009ae61e2026"],"layout":"IPY_MODEL_99545e09ba8a4077875fc4e33d4871f5"}},"7b3bd15996fa446db312112b1725fbc5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_1e7cc887dd7f463ab694c9646d18d27f","placeholder":"​","style":"IPY_MODEL_1a80704df046499db321e4782ffebec5","value":"merges.txt: 100%"}},"bf257cd38f094360abd47558ea198cf1":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_3c2780c2047e4fc4802bcaaf9bcec4da","max":456318,"min":0,"orientation":"horizontal","style":"IPY_MODEL_8f5a947ca6bc4003aa77c9cac83fa791","value":456318}},"77801f5049674a0bbc84009ae61e2026":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_b7c468f31be64df1a0b22ad83b490641","placeholder":"​","style":"IPY_MODEL_24c0d2611405416c8b3fa64c8bfe63bd","value":" 456k/456k [00:00&lt;00:00, 6.97MB/s]"}},"99545e09ba8a4077875fc4e33d4871f5":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1e7cc887dd7f463ab694c9646d18d27f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1a80704df046499db321e4782ffebec5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3c2780c2047e4fc4802bcaaf9bcec4da":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8f5a947ca6bc4003aa77c9cac83fa791":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"b7c468f31be64df1a0b22ad83b490641":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"24c0d2611405416c8b3fa64c8bfe63bd":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"07072cb47d1b455990023f4f2e08c56c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_ced4da5452374ed3a77426d8934e63a9","IPY_MODEL_ac455ba243c64b409e8f4fcde97a3c0e","IPY_MODEL_0779edf094824465a26b8d31a94c2839"],"layout":"IPY_MODEL_0464cdae36a14804a79af9de309ec23c"}},"ced4da5452374ed3a77426d8934e63a9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_839bc1d865134c54b9e7fe74042e7a1c","placeholder":"​","style":"IPY_MODEL_11e857d6465d4eb5aa2e71bdc5fe0e55","value":"tokenizer.json: 100%"}},"ac455ba243c64b409e8f4fcde97a3c0e":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_0be44dd2e091483e901780d6e7237069","max":1355863,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e77e695dba6641bbbd2a7b1dacb25863","value":1355863}},"0779edf094824465a26b8d31a94c2839":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a5fe6a2660cb41ff921b035976aac0ef","placeholder":"​","style":"IPY_MODEL_83a6d2c5eddb4da9830231afc5b8497c","value":" 1.36M/1.36M [00:00&lt;00:00, 5.02MB/s]"}},"0464cdae36a14804a79af9de309ec23c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"839bc1d865134c54b9e7fe74042e7a1c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"11e857d6465d4eb5aa2e71bdc5fe0e55":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0be44dd2e091483e901780d6e7237069":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e77e695dba6641bbbd2a7b1dacb25863":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"a5fe6a2660cb41ff921b035976aac0ef":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"83a6d2c5eddb4da9830231afc5b8497c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lzk3c4feA4Z2","executionInfo":{"status":"ok","timestamp":1738149268198,"user_tz":-330,"elapsed":37092,"user":{"displayName":"KingdomOfStudy","userId":"03201092242876346295"}},"outputId":"2bb72d7a-e50b-45ba-df2e-8940ab7e0288"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":1,"metadata":{"id":"z35VOIt4-toF","executionInfo":{"status":"ok","timestamp":1738307958898,"user_tz":-330,"elapsed":36146,"user":{"displayName":"KingdomOfStudy","userId":"03201092242876346295"}}},"outputs":[],"source":["import torch\n","import torch.nn as nn\n","from torch.utils.data import Dataset, DataLoader\n","from transformers import RobertaModel, RobertaTokenizer\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from typing import Tuple, List, Dict, Optional, Any\n","from tqdm import tqdm\n","import os"]},{"cell_type":"code","source":["class TextDataset(Dataset):\n","    def __init__(self, X_text, y_label):\n","        self.X_text = X_text['text']\n","        self.y_label = y_label['label']\n","\n","    def __getitem__(self, index):\n","        text = self.X_text.iloc[index]\n","        label = self.y_label.iloc[index]\n","        return text, label\n","\n","    def __len__(self):\n","        return len(self.X_text)\n"],"metadata":{"id":"mRphrKmT-2_J"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class FineTunedRobertaClassifier(nn.Module):\n","    def __init__(self, roberta_model, roberta_tokenizer, num_class, device):\n","        super().__init__()\n","        self.model = roberta_model\n","        self.tokenizer = roberta_tokenizer\n","\n","        for param in self.model.parameters():\n","            param.requires_grad = False\n","\n","        self.classifier = nn.Sequential(\n","            nn.Linear(in_features=768, out_features=768),\n","            nn.GELU(),\n","            nn.Dropout(p=0.25),\n","            nn.Linear(768, num_class)\n","        )\n","\n","    def forward(self, input_text):\n","        text_embedding = self.tokenizer(\n","            input_text,\n","            max_length = 512,\n","            truncation = True,\n","            padding = 'max_length',\n","            return_tensors = 'pt'\n","        ).to(device)\n","        last_hidden_state = self.model(**text_embedding).last_hidden_state\n","        logits = self.classifier(last_hidden_state[:, 0, :])\n","        return logits"],"metadata":{"id":"4RkkFog--3A9"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def train_model(\n","    model: nn.Module,\n","    device: torch.device,\n","    train_dataloader: DataLoader,\n","    criterion: nn.Module,\n","    optimizer: torch.optim.Optimizer,\n","    l1_lambda: float = 0.0\n",") -> Tuple[float, float]:\n","    \"\"\"\n","    Trains a model for one epoch and calculates the average loss and accuracy.\n","\n","    Args:\n","        model (nn.Module): The neural network model to train.\n","        device (torch.device): The device to run training on (CPU or GPU).\n","        train_dataloader (DataLoader): DataLoader providing the training data.\n","        criterion (Module): Loss function to optimize.\n","        optimizer (torch.optim.Optimizer): Optimizer to update model parameters.\n","        l1_lambda (float): Weight for L1 regularization penalty. Defaults to 0.0.\n","\n","    Returns:\n","        Tuple[float, float]: A tuple containing:\n","            - Average training loss (float).\n","            - Training accuracy as a percentage (float).\n","\n","    Raises:\n","        ValueError: If the DataLoader is empty.\n","    \"\"\"\n","    # Check if DataLoader contains data\n","    if len(train_dataloader.dataset) == 0:\n","        raise ValueError(\"Training DataLoader contains no data. Check your dataset or DataLoader configuration.\")\n","\n","    # Set the model to training mode\n","    model.train()\n","\n","    # Initialize accumulators for loss and correct predictions\n","    train_loss = 0.0\n","    num_train_examples = 0\n","    train_corrects = 0\n","\n","    for inputs, labels in train_dataloader:\n","        # Move data to the specified device\n","        labels = labels.to(device)\n","\n","        # Clear previous gradients\n","        optimizer.zero_grad()\n","\n","        # Forward pass\n","        outputs = model(inputs)\n","\n","        # Compute loss\n","        loss = criterion(outputs, labels)\n","\n","        # L1 Regularization\n","        if l1_lambda > 0:\n","            l1_penalty = sum(param.abs().sum() for param in model.parameters())\n","            loss += l1_lambda * l1_penalty\n","\n","        # Backward pass and optimization\n","        loss.backward()\n","        optimizer.step()\n","\n","        # Accumulate metrics\n","        train_loss += loss.item()  # Add batch loss\n","        num_train_examples += labels.size(0)  # Count examples\n","        predicted_labels = outputs.argmax(dim=1)  # Get predicted classes\n","        train_corrects += (predicted_labels == labels).sum().item()  # Count correct predictions\n","\n","    # Check for zero examples to avoid division by zero\n","    if num_train_examples == 0:\n","        return float('nan'), float('nan')\n","\n","    # Calculate average loss and accuracy\n","    average_loss = train_loss / len(train_dataloader)\n","    accuracy = (train_corrects / num_train_examples) * 100\n","\n","    return average_loss, accuracy\n","\n","\n","\n","def evaluate_model(\n","    model: nn.Module,\n","    device: torch.device,\n","    val_dataloader: DataLoader,\n","    criterion: nn.Module\n",") -> Tuple[float, float]:\n","    \"\"\"\n","    Evaluates a model on a validation dataset and calculates the average loss and accuracy.\n","\n","    Args:\n","        model (nn.Module): The neural network model to evaluate.\n","        device (torch.device): The device to run evaluation on (CPU or GPU).\n","        val_dataloader (DataLoader): DataLoader providing the validation data.\n","        criterion (nn.Module): Loss function to compute validation loss.\n","\n","    Returns:\n","        Tuple[float, float]: A tuple containing:\n","            - Average validation loss (float).\n","            - Validation accuracy as a percentage (float).\n","\n","    Raises:\n","        ValueError: If the DataLoader is empty.\n","    \"\"\"\n","    # Check if DataLoader contains data\n","    if len(val_dataloader.dataset) == 0:\n","        raise ValueError(\"Validation DataLoader contains no data. Check your dataset or DataLoader configuration.\")\n","\n","    # Set the model to evaluation mode\n","    model.eval()\n","\n","    # Initialize accumulators for loss and correct predictions\n","    val_loss = 0.0\n","    num_val_examples = 0\n","    val_corrects = 0\n","\n","    # Disable gradient computation for evaluation\n","    with torch.no_grad():\n","        for inputs, labels in val_dataloader:\n","            # Move data to the specified device\n","            labels = labels.to(device)\n","\n","            # Forward pass\n","            outputs = model(inputs)\n","\n","            # Compute loss\n","            loss = criterion(outputs, labels)\n","\n","            # Accumulate metrics\n","            val_loss += loss.item()  # Add batch loss\n","            num_val_examples += labels.size(0)  # Count examples\n","            predicted_labels = outputs.argmax(dim=1)  # Get predicted classes\n","            val_corrects += (predicted_labels == labels).sum().item()  # Count correct predictions\n","\n","    # Check for zero examples to avoid division by zero\n","    if num_val_examples == 0:\n","        return float('nan'), float('nan')\n","\n","    # Calculate average loss and accuracy\n","    average_loss = val_loss / len(val_dataloader)\n","    accuracy = (val_corrects / num_val_examples) * 100\n","\n","    return average_loss, accuracy"],"metadata":{"id":"X02869_2BcXW"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def visualize_metrics(\n","    metrics: Dict[str, Dict[str, List[float]]],\n","    figsize: Optional[tuple] = (12, 6),\n","    save_path: Optional[str] = None,\n","    grid: bool = True,\n","    style: str = \"ggplot\",\n","    line_styles: Optional[Dict[str, str]] = None\n",") -> None:\n","    \"\"\"\n","    Visualizes training and validation metrics over epochs.\n","\n","    Args:\n","        metrics (Dict[str, Dict[str, List[float]]]): A dictionary containing metrics for plotting.\n","            Example:\n","                {\n","                    \"Loss\": {\"Train\": [0.5, 0.4, 0.3], \"Validation\": [0.6, 0.5, 0.4]},\n","                    \"Accuracy\": {\"Train\": [70, 80, 85], \"Validation\": [65, 75, 80]}\n","                }\n","        figsize (tuple, optional): Tuple specifying the figure size. Defaults to (12, 6).\n","        save_path (str, optional): Path to save the plot as an image. If None, the plot is not saved. Defaults to None.\n","        grid (bool, optional): Whether to display gridlines on the plots. Defaults to True.\n","        style (str, optional): Matplotlib style to use. Defaults to \"seaborn-bright\".\n","        line_styles (Dict[str, str], optional): Custom line styles for each metric type.\n","            Example: {\"Train\": \"--\", \"Validation\": \"-\"}.\n","\n","    Raises:\n","        ValueError: If input lists have different lengths or are empty.\n","    \"\"\"\n","    # Apply plotting style\n","    plt.style.use(style)\n","\n","    # Validation checks\n","    for metric, values in metrics.items():\n","        train_values = values.get(\"Train\", [])\n","        val_values = values.get(\"Validation\", [])\n","        if len(train_values) != len(val_values):\n","            raise ValueError(f\"Mismatched lengths for {metric}: Train ({len(train_values)}), Validation ({len(val_values)}).\")\n","        if len(train_values) == 0:\n","            raise ValueError(f\"No data provided for {metric}.\")\n","\n","    epochs = range(1, len(next(iter(metrics.values()))[\"Train\"]) + 1)\n","\n","    # Create the figure\n","    plt.figure(figsize=figsize)\n","\n","    # Loop through metrics and create subplots\n","    num_metrics = len(metrics)\n","    for i, (metric_name, data) in enumerate(metrics.items(), start=1):\n","        plt.subplot(1, num_metrics, i)\n","        for label, values in data.items():\n","            style = line_styles.get(label, '-') if line_styles else '-'\n","            plt.plot(epochs, values, label=f\"{label} {metric_name}\", linestyle=style, marker='o')\n","\n","        plt.xlabel(\"Epochs\", fontsize=12)\n","        plt.ylabel(metric_name, fontsize=12)\n","        plt.title(f\"{metric_name} Curve\", fontsize=14)\n","        plt.legend(fontsize=10)\n","        if grid:\n","            plt.grid(alpha=0.6)\n","\n","    # Adjust layout for better appearance\n","    plt.tight_layout()\n","\n","    # Save or show the plot\n","    if save_path:\n","        plt.savefig(save_path, bbox_inches='tight', dpi=300)\n","    plt.show()"],"metadata":{"id":"oEuXATST-3GZ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def training_and_evaluation(\n","    model: nn.Module,\n","    device: torch.device,\n","    train_dataloader: DataLoader,\n","    val_dataloader: DataLoader,\n","    num_epochs: int,\n","    criterion: nn.Module,\n","    optimizer: torch.optim.Optimizer,\n","    save_model_dir: Optional[str] = None,\n","    save_every_n_epochs: int = 5,\n","    scheduler: Optional[torch.optim.lr_scheduler._LRScheduler] = None,\n","    early_stopping: Optional[Dict[str, Any]] = None,\n","    l1_lambda: float = 0.0,\n","    verbose: bool = False,\n","    log_path: Optional[str] = None,\n","    checkpoint_path: Optional[str] = None,\n","    improvement_threshold: float = 0.001\n",") -> Dict[str, Any]:\n","    \"\"\"\n","    Trains and evaluates a PyTorch model with optional saving, early stopping, L1 regularization, custom scheduling.\n","\n","    Args:\n","        model (nn.Module): The model to train and evaluate.\n","        device (torch.device): The device (CPU/GPU) to use.\n","        train_dataloader (DataLoader): Dataloader for training data.\n","        val_dataloader (DataLoader): Dataloader for validation data.\n","        num_epochs (int): Number of epochs to train the model.\n","        criterion (nn.Module): Loss function to optimize.\n","        optimizer (torch.optim.Optimizer): Optimizer for model training.\n","        save_model_dir (Optional[str]): Directory to save model checkpoints. Defaults to None.\n","        save_every_n_epochs (int): Frequency to save the model (e.g., every `n` epochs). Defaults to 5.\n","        scheduler (Optional[torch.optim.lr_scheduler._LRScheduler]): Learning rate scheduler. Defaults to None.\n","        early_stopping (Optional[Dict[str, Any]]): Early stopping configuration:\n","            - \"monitor\": Metric to monitor (\"val_loss\" or \"val_acc\").\n","            - \"patience\": Number of epochs to wait for improvement.\n","        l1_lambda (float): Weight for L1 regularization penalty. Defaults to 0.0.\n","        verbose (bool): Whether to print detailed training information. Defaults to False.\n","        log_path (Optional[str]): File path to save log information. Defaults to None.\n","        checkpoint_path (Optional[str]): Path to a model checkpoint to resume training. Defaults to None.\n","        improvement_threshold (float): Minimum improvement required to save the best model.\n","\n","    Returns:\n","        Dict[str, Any]: A dictionary containing training and validation metrics.\n","    \"\"\"\n","\n","    metrics = {\n","        \"Loss\": {\"Train\": [], \"Validation\": []},\n","        \"Accuracy\": {\"Train\": [], \"Validation\": []}\n","    }\n","\n","    # Early stopping setup\n","    if early_stopping:\n","        monitor = early_stopping.get(\"monitor\", \"val_loss\")\n","        patience = early_stopping.get(\"patience\", 5)\n","        best_metric = float(\"inf\") if monitor == \"val_loss\" else -float(\"inf\")\n","        patience_counter = 0\n","\n","    # Logging setup\n","    if log_path:\n","        with open(log_path, \"w\") as log_file:\n","            log_file.write(\"Epoch, Train Loss, Train Accuracy, Val Loss, Val Accuracy, Learning Rate\\n\")\n","\n","    # Create save directory if needed\n","    if save_model_dir:\n","        os.makedirs(save_model_dir, exist_ok=True)\n","\n","    # Load checkpoint if provided\n","    start_epoch = 1\n","    if checkpoint_path and os.path.isfile(checkpoint_path):\n","        checkpoint = torch.load(checkpoint_path, map_location=device)\n","        model.load_state_dict(checkpoint[\"model_state_dict\"])\n","        optimizer.load_state_dict(checkpoint[\"optimizer_state_dict\"])\n","        metrics = checkpoint.get(\"metrics\", metrics)\n","        start_epoch = checkpoint[\"epoch\"] + 1\n","        print(f\"Resuming training from epoch {start_epoch}...\")\n","\n","    # Move model to device\n","    model = model.to(device)\n","\n","    # Training loop\n","    for epoch in tqdm(range(start_epoch, num_epochs + 1), desc=\"Training Progress\"):\n","        # Training step\n","        train_loss, train_acc = train_model(model, device, train_dataloader, criterion, optimizer, l1_lambda)\n","\n","        # Validation step\n","        val_loss, val_acc = evaluate_model(model, device, val_dataloader, criterion)\n","\n","        # Update metrics\n","        metrics[\"Loss\"][\"Train\"].append(train_loss)\n","        metrics[\"Accuracy\"][\"Train\"].append(train_acc)\n","        metrics[\"Loss\"][\"Validation\"].append(val_loss)\n","        metrics[\"Accuracy\"][\"Validation\"].append(val_acc)\n","\n","        # Learning rate update\n","        if scheduler:\n","            scheduler.step(val_loss if isinstance(scheduler, torch.optim.lr_scheduler.ReduceLROnPlateau) else None)\n","            current_lr = scheduler.get_last_lr()[0] if hasattr(scheduler, \"get_last_lr\") else optimizer.param_groups[0][\"lr\"]\n","        else:\n","            current_lr = optimizer.param_groups[0][\"lr\"]\n","\n","        # Print progress\n","        progress_msg = (f\"Epoch [{epoch}/{num_epochs}] | \"\n","                        f\"Train Loss: {train_loss:.4f} | Train Accuracy: {train_acc:.2f} % | \"\n","                        f\"Val Loss: {val_loss:.4f} | Val Accuracy: {val_acc:.2f} % | \"\n","                        f\"Learning Rate: {current_lr:.6f}\")\n","        if verbose:\n","            print(progress_msg)\n","\n","        # Logging\n","        if log_path:\n","            with open(log_path, \"a\") as log_file:\n","                log_file.write(f\"{epoch}, {train_loss:.4f}, {train_acc:.2f}, {val_loss:.4f}, {val_acc:.2f}, {current_lr:.6f}\\n\")\n","\n","        # Save model checkpoint\n","        if save_model_dir and (epoch % save_every_n_epochs == 0):\n","            checkpoint_path = os.path.join(save_model_dir, f\"model_epoch_{epoch}.pth\")\n","            state = {\n","                \"epoch\": epoch,\n","                \"model_state_dict\": model.state_dict(),\n","                \"optimizer_state_dict\": optimizer.state_dict(),\n","                \"metrics\": metrics\n","            }\n","            torch.save(state, checkpoint_path)\n","            if verbose:\n","                print(f\"Model checkpoint saved: {checkpoint_path}\")\n","\n","        # Early stopping\n","        if early_stopping:\n","            current_metric = val_loss if monitor == \"val_loss\" else val_acc\n","            is_improvement = (current_metric < best_metric - improvement_threshold) if monitor == \"val_loss\" else (current_metric > best_metric + improvement_threshold)\n","\n","            if is_improvement:\n","                best_metric = current_metric\n","                patience_counter = 0\n","\n","                # Save best model\n","                if save_model_dir:\n","                    best_model_path = os.path.join(save_model_dir, \"best_model.pth\")\n","                    torch.save(model.state_dict(), best_model_path)\n","                    if verbose:\n","                        print(f\"Best model updated and saved: {best_model_path}\")\n","            else:\n","                patience_counter += 1\n","                if patience_counter >= patience:\n","                    print(f\"Early stopping triggered at epoch {epoch}.\")\n","                    break\n","\n","    return metrics"],"metadata":{"id":"UgtghXCOABm5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataset = pd.read_csv(\"/content/drive/MyDrive/HumanVsAI/Dataset/HumanVsAI_dataset.csv\")"],"metadata":{"id":"AeF-2K-H-3Jp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataset.shape"],"metadata":{"id":"Qe5c4vb2-3LZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1738143838788,"user_tz":-330,"elapsed":10,"user":{"displayName":"KingdomOfStudy","userId":"03201092242876346295"}},"outputId":"b0f7aa03-450e-4e5a-80e3-a0c6744c3630"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(58537, 2)"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["dataset.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"kwRk6rt0APfn","executionInfo":{"status":"ok","timestamp":1738143840236,"user_tz":-330,"elapsed":1455,"user":{"displayName":"KingdomOfStudy","userId":"03201092242876346295"}},"outputId":"40d02b50-a75c-49d5-85a2-a53817fa8900"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                text  label\n","0  Google Wants to Kill the Traditional, Clunky C...      0\n","1  When Donald Trump pulled off a stunning upset ...      0\n","2  Capturing the beauty of nature is one of the b...      1\n","3  During the Holocaust, Yariv Bash's grandfather...      0\n","4  The developers of Scrabulous, the game that wa...      1"],"text/html":["\n","  <div id=\"df-74236590-bb06-4b4f-9005-4d108c1bb47c\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>text</th>\n","      <th>label</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Google Wants to Kill the Traditional, Clunky C...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>When Donald Trump pulled off a stunning upset ...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Capturing the beauty of nature is one of the b...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>During the Holocaust, Yariv Bash's grandfather...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>The developers of Scrabulous, the game that wa...</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-74236590-bb06-4b4f-9005-4d108c1bb47c')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-74236590-bb06-4b4f-9005-4d108c1bb47c button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-74236590-bb06-4b4f-9005-4d108c1bb47c');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e5e15aad-fe34-4e25-b600-bd7f670dbcb3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e5e15aad-fe34-4e25-b600-bd7f670dbcb3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e5e15aad-fe34-4e25-b600-bd7f670dbcb3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"dataset","summary":"{\n  \"name\": \"dataset\",\n  \"rows\": 58537,\n  \"fields\": [\n    {\n      \"column\": \"text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 58537,\n        \"samples\": [\n          \"On Tuesday, Senator Claire McCaskill from Missouri announced that a retired Army sergeant and his wife, both of whom work for the Defense Department, have continued to receive payments after their scheme to collect Army recruiting bonuses using fake website \\\"officialArmy.com\\\" was brought to light.\\r\\nAccording to McCaskill's investigation by the Senate Homeland Security and Governmental Affairs Subcommittee on Financial and Contracting Oversight, the couple made $4 million from bonuses for referring potential recruits whose names they gathered through their bogus website.\\r\\nSenator McCaskill presented her findings to Army Secretary John McHugh, following a demand for a review of recruitment oversight and safeguards made back in December. Describing herself as \\\"absolutely disgusted\\\", McCaskill condemned the couple's actions calling it a \\\"staggering exploitation of public trust, of the brave men and women who volunteer to serve in the Army, and of taxpayer dollars.\\\"\\r\\nWhile the couple set up the fake website which has since been abandoned, they did not offer any other service to encourage recruitment to the Army. Moreover, according to McCaskill, \\\"the majority of names would likely have joined the Army regardless of having found the officialArmy.com website.\\\"\\r\\nMcCaskill also discovered that Army officials were aware of the scam but drew no conclusions as there are no caps on bonuses allotted. One Army official reacted to McCaskill's claims by saying: \\\"It's sleazy but legal. The couple is not required to return the money, they face no criminal charges, and they are both still employed at the Department of Defense.\\\"\\r\\nMcCaskill highlighted that an Army program that ran from 2006 to 2009 offering referral bonuses had to be terminated because of fraud and duplicate bonuses; this program was entitled the Army Recruiting Command.\\r\\nFinally, an Army spokesman has stated that it is \\\"reviewing the letter and will respond appropriately.\\\"\",\n          \"The Nanyang Championships, organized by KeyTV, has announced its prize pool of up to $200,000 USD that will be partially crowd funded. The tournament will take place in the Suntec convention centre in Singapore, which has a seating capacity of over 7,000 people. The event will have four regional qualifiers in September, leading up to the LAN finals in November. KeyTV has not yet announced the invited rosters, but has revealed that two teams from Europe and China, as well as one team each from America and Southeast Asia, will participate.\\r\\nDuring the LAN finals, the tournament will have two distinct phases. For the first stage, attending squads will be split into two groups of five participating in BO2 round robins. The top two teams from each group will proceed to the winners' bracket and the 3rd-4th place finishers will be seeded into the lower bracket, with the last place teams eliminated. For the second phase, the remaining eight teams will compete in a double elimination bracket to determine the finalists, with matches being BO3's except for the first two rounds of the lower bracket which will be BO1's. The tournament will conclude with a BO5 grand final on November 1st after a two day double elimination bracket and a rest day on the 31st of October.\\r\\nThe prize pool distribution for the tournament is as follows: 1st Place: $100,000 USD + 48% crowdfunded contribution, 2nd Place: $50,000 USD + 24% crowdfunded contribution, 3rd Place: $25,000USD + 12% crowdfunded contribution, 4th Place: $10,000USD + 8% crowdfunded contribution, 5th-6th Place: $7,500USD + 4% crowdfunded contribution. The prize pool will be partially crowd funded with 25% of all in-game ticket sales contributing to the base pool, including a compendium and in-game items available on the DOTA 2 store in the coming weeks.\\r\\nThe Nanyang Championships will be one of the first major LAN events post-TI, happening only two months after the biggest tournament on the DOTA calendar. The event will serve as a testing ground for new rosters, as The International has historically caused significant shuffles in the competitive scene.\",\n          \"General Trends in Games between the clubs;\\r\\nIt's a low scoring fixture; Only 1.6 goals per game in the last 3 matches between the clubs. City have scored just once in the last four and a half hours of football at Goodison\\r\\nOnly 1.6 goals per game in the last 3 matches between the clubs. City have scored just once in the last four and a half hours of football at Goodison City will control the ball ; Our visitors will dominate possession although it will not always be threatening possession e.g. the most frequent passing combinations in the last two games for City have been Lescott - Kompany and Yaya Toure to Barry.\\r\\n; Our visitors will dominate possession although it will not always be threatening possession e.g. the most frequent passing combinations in the last two games for City have been Lescott - Kompany and Yaya Toure to Barry. Toffee's will look for territory gains ; Territory wise it is something of a dead heat i.e. whilst City have all the ball it is predominantly in our half with us getting 11 men behind the ball and playing more direct from back to front.\\r\\n; Territory wise it is something of a dead heat i.e. whilst City have all the ball it is predominantly in our half with us getting 11 men behind the ball and playing more direct from back to front. Set plays key for us; City roughly create double the amount of chances than we do, with ourselves creating a higher percentage from set plays.\\r\\nCity roughly create double the amount of chances than we do, with ourselves creating a higher percentage from set plays. Blues graft will be crucial; Due to City's possession we have always had to work harder in terms of being off the ball for longer periods. The exception to this was the last game when City regained possession more than us despite having more of the ball, a consequence of us looking to keep shape and not press as much (which could lose to us losing defensive shape). We will generally defend compact with full backs tucked in to snuff out the central areas as shown below ...so we basically give City space but in wide areas where they are less threatening.\\r\\nDue to City's possession we have always had to work harder in terms of being off the ball for longer periods. The exception to this was the last game when City regained possession more than us despite having more of the ball, a consequence of us looking to keep shape and not press as much (which could lose to us losing defensive shape). We will generally defend compact with full backs tucked in to snuff out the central areas as shown below ...so we basically give City space but in wide areas where they are less threatening.\\r\\nManager and Player Analysis\\r\\nRoberto Mancini\\r\\nThe Italian's defensive strategy is based on a defensive six (4 defenders, 2 defensive mids) When not on the ball he likes his sides to press and win it back quickly. Going forward Mancini plays a possession focused game, making sure the ball is moved around the pitch, probing for spaces to invite defences to come out to press and then exploit with a killer pass.\\r\\nThe focus is on being quick and sharp in the counter attack and moving quickly in tight spaces going forward with fast paced players who can penetrate spaces between opposition lines and create opportunities. For example, the below shows the average positions of the teams in last season's fixture (efc left/city right) ....the lines between our defence and midfield are the areas City's attacking players (circled) predominantly operate and look to make gains.\\r\\nLikely Team.....\\r\\nJoe Hart\\r\\nComparisons with Casillas and Buffon were ridiculous but Hart is a solid performer with a good command of his area. Has kept 30 clean sheets in the Premier League since August 2011, nine more than any other 'keeper in that period and has conceded fewer goals on the road than any top flight stopper this season. Also loves chill-axing post match down the go-cart track.\\r\\nPablo Zabaleta\\r\\nVersatile performer who has been City's most consistent player this season from right back. Great tackler, good going forward and also competent in the air. The only fly in his ointment is a propensity to get a bit too tight which has led to him making the most fouls and being dribbled past more than anyone in the City squad.\\r\\nVincent Kompany\\r\\nShould dislodge part time car salesman Kolo Toure in the right of centre slot despite the Ivorian recently being in decent form. A genuine colossal customer both in the air and on the deck. Not the greatest defender in terms of distribution. Only slight blot on his copybook is a fondness to go to ground which has led to a few issues with referees in the last twelve months.\\r\\nJoleon Lescott\\r\\nLescott appears on his way out of the club after losing his place to the excellent Nastasic. The ex blue is usually selected against sides with a significant aerial threat so will likely be in contention for a start in this one. The Serb has a much higher tackle completion rate and crucially unlike Lescott can pass the ball; Nastasic has completed 33% more passes per game and is particularly good in terms of long range passing, making 4.3 successful long passes per game to lescott's 1.3.\\r\\nGael Clichy\\r\\nAn excellent tackler with great mobility. at 5'9 he's the same height as Pablo Zabaleta but is less capable in the air winning less than half his aerial duels. Can at times be targeted by opposition managers as a weak link so expect Heitinga/Gibson to loft balls in his direction towards Fellaini.\\r\\nJames Milner\\r\\nThe archetype English player with the exception of being tee total. Usually deployed on the right of midfield to track baines, started the last 2 games at goodison before being subbed off both times after City have fallen behind. Grafter who is more notable for his ability off the ball than on it...will give you a wet shirt at the end of the game. Once had a trial with the toffees and looks like a right laugh off the pitch.\\r\\nYaya Toure\\r\\nRightfully lauded as the lynchpin of the side. Last time was restricted from making his trademark forward surges due to picking up Fellaini further back particularly from Howard kick outs. Will most likely have a similar brief in this game. Hopefully he has an off day.\\r\\nJavi Garcia\\r\\nMuch better than Gareth Barry. Ex Benfica and Real Madrid midfielder and occasional centre back. Is good in the air and can move the ball well. Is susceptible to being beaten for pace.\\r\\nDavid Silva\\r\\nWe'll need to watch this cat. The key mischief-maker who averages a chance created every 26 minutes in the top flight this season. Notably struggles in these encounters with our restriction of space through the middle. Failed to create a single chance in the game at the Etihad this season and was man marked out of the game by Rodwell last season. Not as sharp going towards his own goal and was chastised by Mancini for not tracking Baines run in the first half in the move which led to Fellaini goal earlier this season.\\r\\nCarlos Tevez\\r\\nVile no necked sub humanTevez has been mostly the support striker this season, leading to him assisting 7 goals - the joint highest with Silva. Generally has struggled against us in the past and has not scored in open play in 11 games vs everton for 3 different clubs. Better to keep him on his left peg with 87% of his goals this season coming from his right foot.\\r\\nEden Dzeko\\r\\nThe nailed on starter for City; always plays against us when fit due to his physicality and will pick up Fellaini from set pieces. Predominantly right footed forward who has also never scored against Everton.\\r\\nEB\\r\\nAdvertisements\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["dataset_v1 = dataset.copy()"],"metadata":{"id":"7lHhEP_MJuMO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataset_25k_samples = dataset_v1.iloc[:25000, :]"],"metadata":{"id":"5Ewdy--o-3O6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dataset_25k_samples.shape"],"metadata":{"id":"Aht8gEsU-3Qp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1738143840237,"user_tz":-330,"elapsed":13,"user":{"displayName":"KingdomOfStudy","userId":"03201092242876346295"}},"outputId":"b45c71bc-7266-42a1-c8f2-2d1e4069e0d6"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(25000, 2)"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["X = dataset_25k_samples.drop('label', axis=1)\n","y = dataset_25k_samples.drop('text', axis=1)"],"metadata":{"id":"E2YMiqvm-3Uh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=42)\n","X_train.reset_index(drop=True, inplace=True)\n","X_test.reset_index(drop=True, inplace=True)\n","y_train.reset_index(drop=True, inplace=True)\n","y_test.reset_index(drop=True, inplace=True)"],"metadata":{"id":"MK6ZDS3f-3We"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["roberta_model = RobertaModel.from_pretrained('roberta-base')\n","roberta_tokenizer = RobertaTokenizer.from_pretrained('roberta-base')"],"metadata":{"id":"HO7I_N2b-3Zn","colab":{"base_uri":"https://localhost:8080/","height":368,"referenced_widgets":["a1d47cc121ea4b7bae8e9cffb7f99923","24a142546fe9474ca48dbe21216fe361","f6d03210b0f14b52ab703cc07fee9e11","c4894c3da71d4777be0c9694da9620ec","47c170c923a14ab2b82d1aec2407feb2","be8a5a6f16cb42be8b61e48c5444e3cf","bff45ad726e8408c82684240230fb5c0","111438b6b3a84071bbd58b331f9468cb","efa06ac1cb90402eae5cee578057b88c","e4d7c7d8810948dab2b351bf56abfa68","08076259f4414709a2d1ea9c4ff881f7","77dceaae51e543e783fc0a58c3ecb2a7","42f500de55b44c069e18d11f5c9d7798","45fe8df11f9846f1b09e20f1e092f156","230c82d510194ab4a23d826f1625495b","c81487f10b8a4f5c9a2f9c852c31609e","f06a594ab7ac42d38582ee148e5408ae","bacef44cfb9c440b9aee4f7baeb47009","6fd31a279eb442909c623c295be9c430","96ddfa741ad6415198d7806da862aad0","a39235cc17c24d2f98ffbd6158d859db","e2387f166dc748c2a2c13b1e411776d0","af095b761ed94e05b938c13c2fd1e477","fcd21e482f9740dca739850e2b5f49ba","9ce6ea2cf7574499841c22a6328ac3a6","904bf80aaab84296bc7bef1e57de521e","009c47e637b944b58a194967c04cb746","6481437e0cd7463983bb6919f93661ba","032369e81f2a4a1d85d4dd97129183f5","10d23c60cb714e6cba40c504c24ad1ec","2131eed38e01409b8e70117a08b57078","19106763dd0a4027a9fbc74f3e85822b","d3b4cad9d6a94f90b43951c34bae82d8","a6cac1947bd245379c39a2e02110752c","19e27755e8bb465aab3d5f079aee74ff","28b405b881e74ade941929218287a6fe","0ba1db0439964d66a2b7b018a5d001c4","234303a163bb47e18fb9484289d138b3","b64f2e05e84f4529aaaccdad478789f5","cac2e83e8c77402daf905266959c52d2","00ceda6cdae944fbb46b3c234180acb3","b4600412521a464f9b092cf66d307b42","ad31b6162d7c4b8ba563498dbd1b4307","2c435adb0d9649c69130bca7b6b4b3bc","12fad43267fd480ab09fccf13c0c2e29","7b3bd15996fa446db312112b1725fbc5","bf257cd38f094360abd47558ea198cf1","77801f5049674a0bbc84009ae61e2026","99545e09ba8a4077875fc4e33d4871f5","1e7cc887dd7f463ab694c9646d18d27f","1a80704df046499db321e4782ffebec5","3c2780c2047e4fc4802bcaaf9bcec4da","8f5a947ca6bc4003aa77c9cac83fa791","b7c468f31be64df1a0b22ad83b490641","24c0d2611405416c8b3fa64c8bfe63bd","07072cb47d1b455990023f4f2e08c56c","ced4da5452374ed3a77426d8934e63a9","ac455ba243c64b409e8f4fcde97a3c0e","0779edf094824465a26b8d31a94c2839","0464cdae36a14804a79af9de309ec23c","839bc1d865134c54b9e7fe74042e7a1c","11e857d6465d4eb5aa2e71bdc5fe0e55","0be44dd2e091483e901780d6e7237069","e77e695dba6641bbbd2a7b1dacb25863","a5fe6a2660cb41ff921b035976aac0ef","83a6d2c5eddb4da9830231afc5b8497c"]},"executionInfo":{"status":"ok","timestamp":1738308071500,"user_tz":-330,"elapsed":10058,"user":{"displayName":"KingdomOfStudy","userId":"03201092242876346295"}},"outputId":"6f6732b9-fe9c-4527-bb2f-29d15f4f4dfc"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/huggingface_hub/utils/_auth.py:94: UserWarning: \n","The secret `HF_TOKEN` does not exist in your Colab secrets.\n","To authenticate with the Hugging Face Hub, create a token in your settings tab (https://huggingface.co/settings/tokens), set it as secret in your Google Colab and restart your session.\n","You will be able to reuse this secret in all of your notebooks.\n","Please note that authentication is recommended but still optional to access public models or datasets.\n","  warnings.warn(\n"]},{"output_type":"display_data","data":{"text/plain":["config.json:   0%|          | 0.00/481 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a1d47cc121ea4b7bae8e9cffb7f99923"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["model.safetensors:   0%|          | 0.00/499M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"77dceaae51e543e783fc0a58c3ecb2a7"}},"metadata":{}},{"output_type":"stream","name":"stderr","text":["Some weights of RobertaModel were not initialized from the model checkpoint at roberta-base and are newly initialized: ['roberta.pooler.dense.bias', 'roberta.pooler.dense.weight']\n","You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"]},{"output_type":"display_data","data":{"text/plain":["tokenizer_config.json:   0%|          | 0.00/25.0 [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"af095b761ed94e05b938c13c2fd1e477"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["vocab.json:   0%|          | 0.00/899k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a6cac1947bd245379c39a2e02110752c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["merges.txt:   0%|          | 0.00/456k [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"12fad43267fd480ab09fccf13c0c2e29"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["tokenizer.json:   0%|          | 0.00/1.36M [00:00<?, ?B/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"07072cb47d1b455990023f4f2e08c56c"}},"metadata":{}}]},{"cell_type":"code","source":["batch_size = 32\n","learning_rate = 0.1 #0.01 #0.001\n","num_epochs = 40"],"metadata":{"id":"9awx1g5_C7xB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(device)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zD8InlYsFxpk","executionInfo":{"status":"ok","timestamp":1738164761262,"user_tz":-330,"elapsed":661,"user":{"displayName":"KingdomOfStudy","userId":"03201092242876346295"}},"outputId":"d7e053f9-5d59-4168-d44b-92bd720dc45f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["cpu\n"]}]},{"cell_type":"code","source":["model = FineTunedRobertaClassifier(roberta_model, roberta_tokenizer, num_class=2, device=device)"],"metadata":{"id":"SsObnhgz7uNX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["criterion = nn.CrossEntropyLoss()\n","optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)\n"],"metadata":{"id":"kEzSfMT6ABo_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_dataset = TextDataset(X_train, y_train)\n","val_dataset = TextDataset(X_test, y_test)"],"metadata":{"id":"YWiY7OCjEWK2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(train_dataset), len(val_dataset)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_-BAb425Mlnb","executionInfo":{"status":"ok","timestamp":1738143853641,"user_tz":-330,"elapsed":57,"user":{"displayName":"KingdomOfStudy","userId":"03201092242876346295"}},"outputId":"7f42aff1-f4a6-419d-c5d3-6f7d724185c4"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(20000, 5000)"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["train_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n","val_dataloader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)"],"metadata":{"id":"fcVp1mNDEaOG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dir_path = r\"/content/drive/MyDrive/HumanVsAI\"\n","checkpoints = os.path.join(dir_path, r\"checkpoints\")\n","log_file = os.path.join(dir_path, r\"log_file.csv\")\n","loss_and_accuracy_curve_path = os.path.join(dir_path, r\"'loss_and_accuracy_curve.jpg'\")"],"metadata":{"id":"Cp04SVcyD6lr"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["metrics = training_and_evaluation(\n","    model=model,\n","    device=device,\n","    train_dataloader=train_dataloader,\n","    val_dataloader=val_dataloader,\n","    num_epochs=num_epochs,\n","    criterion=criterion,\n","    optimizer=optimizer,\n","    save_model_dir=checkpoints,\n","    save_every_n_epochs=2,\n","    verbose=True,\n","    log_path=log_file\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-lZwstQxDJPg","outputId":"5eceef12-8ab5-4bad-e651-fc0992f7ecfa"},"execution_count":null,"outputs":[{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Training Progress:   4%|▍         | 1/25 [13:17<5:18:56, 797.35s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Epoch [1/25] | Train Loss: 0.3187 | Train Accuracy: 87.24 % | Val Loss: 0.2415 | Val Accuracy: 90.44 % | Learning Rate: 0.001000\n","Epoch [2/25] | Train Loss: 0.2202 | Train Accuracy: 91.61 % | Val Loss: 0.2478 | Val Accuracy: 90.20 % | Learning Rate: 0.001000\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["\rTraining Progress:   8%|▊         | 2/25 [26:41<5:07:14, 801.52s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_2.pth\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["\rTraining Progress:  12%|█▏        | 3/25 [39:59<4:53:15, 799.78s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Epoch [3/25] | Train Loss: 0.2035 | Train Accuracy: 91.98 % | Val Loss: 0.1427 | Val Accuracy: 94.92 % | Learning Rate: 0.001000\n","Epoch [4/25] | Train Loss: 0.1973 | Train Accuracy: 92.06 % | Val Loss: 0.1344 | Val Accuracy: 95.20 % | Learning Rate: 0.001000\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["\rTraining Progress:  16%|█▌        | 4/25 [53:20<4:40:02, 800.10s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_4.pth\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["\rTraining Progress:  20%|██        | 5/25 [1:06:39<4:26:33, 799.70s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Epoch [5/25] | Train Loss: 0.1917 | Train Accuracy: 92.52 % | Val Loss: 0.1796 | Val Accuracy: 93.26 % | Learning Rate: 0.001000\n","Epoch [6/25] | Train Loss: 0.1837 | Train Accuracy: 92.72 % | Val Loss: 0.1344 | Val Accuracy: 95.42 % | Learning Rate: 0.001000\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["\rTraining Progress:  24%|██▍       | 6/25 [1:20:00<4:13:22, 800.12s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_6.pth\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  28%|██▊       | 7/25 [1:33:28<4:00:49, 802.73s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/25] | Train Loss: 0.1858 | Train Accuracy: 92.63 % | Val Loss: 0.2000 | Val Accuracy: 92.10 % | Learning Rate: 0.001000\n","Epoch [8/25] | Train Loss: 0.1811 | Train Accuracy: 92.68 % | Val Loss: 0.1935 | Val Accuracy: 92.50 % | Learning Rate: 0.001000\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  32%|███▏      | 8/25 [1:47:18<3:49:54, 811.44s/it]"]},{"output_type":"stream","name":"stdout","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_8.pth\n"]}]},{"cell_type":"code","source":["dir_path = r\"/content/drive/MyDrive/HumanVsAI\"\n","checkpoints = os.path.join(dir_path, r\"checkpoints\")\n","model_path_for_resume_training = \"/content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_10.pth\"\n","log_file = os.path.join(dir_path, r\"log_file2.csv\")\n","loss_and_accuracy_curve_path = os.path.join(dir_path, r\"'loss_and_accuracy_curve.png'\")"],"metadata":{"id":"PLh1wTE_bNVy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["metrics = training_and_evaluation(\n","    model=model,\n","    device=device,\n","    train_dataloader=train_dataloader,\n","    val_dataloader=val_dataloader,\n","    num_epochs=num_epochs,\n","    criterion=criterion,\n","    optimizer=optimizer,\n","    save_model_dir=checkpoints,\n","    save_every_n_epochs=2,\n","    verbose=True,\n","    log_path=log_file,\n","    checkpoint_path = model_path_for_resume_training\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yDwjKxaibNYw","outputId":"b5e2efcb-457d-444a-9eea-4ee392b1bdf8"},"execution_count":null,"outputs":[{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["<ipython-input-26-fe267d21aa46>:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  checkpoint = torch.load(checkpoint_path)\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Resuming training from epoch 11...\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["Training Progress:   7%|▋         | 1/15 [13:44<3:12:25, 824.68s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Epoch [11/25] | Train Loss: 0.1729 | Train Accuracy: 93.14 % | Val Loss: 0.2004 | Val Accuracy: 92.02 % | Learning Rate: 0.001000\n","Epoch [12/25] | Train Loss: 0.1704 | Train Accuracy: 93.20 % | Val Loss: 0.1453 | Val Accuracy: 94.76 % | Learning Rate: 0.001000\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["\rTraining Progress:  13%|█▎        | 2/15 [27:25<2:58:12, 822.53s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_12.pth\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["\rTraining Progress:  20%|██        | 3/15 [41:02<2:44:00, 820.08s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Epoch [13/25] | Train Loss: 0.1716 | Train Accuracy: 93.40 % | Val Loss: 0.1736 | Val Accuracy: 92.94 % | Learning Rate: 0.001000\n","Epoch [14/25] | Train Loss: 0.1740 | Train Accuracy: 93.09 % | Val Loss: 0.1204 | Val Accuracy: 95.78 % | Learning Rate: 0.001000\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["\rTraining Progress:  27%|██▋       | 4/15 [54:46<2:30:34, 821.35s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_14.pth\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["\rTraining Progress:  33%|███▎      | 5/15 [1:08:25<2:16:44, 820.44s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Epoch [15/25] | Train Loss: 0.1691 | Train Accuracy: 93.38 % | Val Loss: 0.1386 | Val Accuracy: 94.88 % | Learning Rate: 0.001000\n","Epoch [16/25] | Train Loss: 0.1693 | Train Accuracy: 93.45 % | Val Loss: 0.1336 | Val Accuracy: 95.06 % | Learning Rate: 0.001000\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["\rTraining Progress:  40%|████      | 6/15 [1:22:06<2:03:07, 820.87s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_16.pth\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["\rTraining Progress:  47%|████▋     | 7/15 [1:35:42<1:49:14, 819.37s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Epoch [17/25] | Train Loss: 0.1650 | Train Accuracy: 93.45 % | Val Loss: 0.1169 | Val Accuracy: 95.92 % | Learning Rate: 0.001000\n","Epoch [18/25] | Train Loss: 0.1597 | Train Accuracy: 93.51 % | Val Loss: 0.1336 | Val Accuracy: 95.04 % | Learning Rate: 0.001000\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["\rTraining Progress:  53%|█████▎    | 8/15 [1:49:26<1:35:44, 820.67s/it]"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_18.pth\n"]},{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["\rTraining Progress:  60%|██████    | 9/15 [2:03:02<1:21:55, 819.30s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/25] | Train Loss: 0.1633 | Train Accuracy: 93.50 % | Val Loss: 0.1766 | Val Accuracy: 92.84 % | Learning Rate: 0.001000\n","Epoch [20/25] | Train Loss: 0.1555 | Train Accuracy: 93.75 % | Val Loss: 0.1293 | Val Accuracy: 95.24 % | Learning Rate: 0.001000\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  67%|██████▋   | 10/15 [2:16:40<1:08:13, 818.79s/it]"]},{"output_type":"stream","name":"stdout","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_20.pth\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  73%|███████▎  | 11/15 [2:30:15<54:31, 817.79s/it]  "]},{"output_type":"stream","name":"stdout","text":["Epoch [21/25] | Train Loss: 0.1567 | Train Accuracy: 93.62 % | Val Loss: 0.1885 | Val Accuracy: 92.20 % | Learning Rate: 0.001000\n"]}]},{"cell_type":"code","source":["dir_path = r\"/content/drive/MyDrive/HumanVsAI\"\n","checkpoints = os.path.join(dir_path, r\"checkpoints\")\n","model_path_for_resume_training = \"/content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_20.pth\"\n","log_file = os.path.join(dir_path, r\"log_file3.csv\")\n","loss_and_accuracy_curve_path = os.path.join(dir_path, r\"'loss_and_accuracy_curve2.png'\")"],"metadata":{"id":"cVnre07nuf4F"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["metrics = training_and_evaluation(\n","    model=model,\n","    device=device,\n","    train_dataloader=train_dataloader,\n","    val_dataloader=val_dataloader,\n","    num_epochs=num_epochs,\n","    criterion=criterion,\n","    optimizer=optimizer,\n","    save_model_dir=checkpoints,\n","    save_every_n_epochs=2,\n","    verbose=True,\n","    log_path=log_file,\n","    checkpoint_path = model_path_for_resume_training\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kGXcvnwhuix3","executionInfo":{"status":"ok","timestamp":1738140385756,"user_tz":-330,"elapsed":7860972,"user":{"displayName":"KingdomOfStudy","userId":"03201092242876346295"}},"outputId":"cfb55a1e-9581-4c60-8280-aa52029231e0"},"execution_count":null,"outputs":[{"metadata":{"tags":null},"name":"stderr","output_type":"stream","text":["<ipython-input-27-a376c49ec411>:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  checkpoint = torch.load(checkpoint_path, map_location=device)\n"]},{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["Resuming training from epoch 21...\n"]},{"output_type":"stream","name":"stderr","text":["Training Progress:  10%|█         | 1/10 [13:58<2:05:50, 838.98s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/30] | Train Loss: 0.1597 | Train Accuracy: 93.76 % | Val Loss: 0.1867 | Val Accuracy: 92.22 % | Learning Rate: 0.001000\n","Epoch [22/30] | Train Loss: 0.1571 | Train Accuracy: 93.83 % | Val Loss: 0.1434 | Val Accuracy: 94.60 % | Learning Rate: 0.001000\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  20%|██        | 2/10 [28:01<1:52:09, 841.16s/it]"]},{"output_type":"stream","name":"stdout","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_22.pth\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  30%|███       | 3/10 [41:55<1:37:45, 837.86s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/30] | Train Loss: 0.1554 | Train Accuracy: 93.74 % | Val Loss: 0.1157 | Val Accuracy: 95.80 % | Learning Rate: 0.001000\n","Epoch [24/30] | Train Loss: 0.1539 | Train Accuracy: 93.95 % | Val Loss: 0.1316 | Val Accuracy: 95.00 % | Learning Rate: 0.001000\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  40%|████      | 4/10 [55:55<1:23:52, 838.74s/it]"]},{"output_type":"stream","name":"stdout","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_24.pth\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  50%|█████     | 5/10 [1:09:50<1:09:45, 837.14s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/30] | Train Loss: 0.1491 | Train Accuracy: 93.96 % | Val Loss: 0.1617 | Val Accuracy: 93.86 % | Learning Rate: 0.001000\n","Epoch [26/30] | Train Loss: 0.1513 | Train Accuracy: 93.97 % | Val Loss: 0.1249 | Val Accuracy: 95.40 % | Learning Rate: 0.001000\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  60%|██████    | 6/10 [1:23:52<55:55, 838.80s/it]  "]},{"output_type":"stream","name":"stdout","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_26.pth\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  70%|███████   | 7/10 [1:37:46<41:51, 837.25s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/30] | Train Loss: 0.1487 | Train Accuracy: 94.03 % | Val Loss: 0.1159 | Val Accuracy: 95.64 % | Learning Rate: 0.001000\n","Epoch [28/30] | Train Loss: 0.1480 | Train Accuracy: 93.83 % | Val Loss: 0.1315 | Val Accuracy: 94.90 % | Learning Rate: 0.001000\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  80%|████████  | 8/10 [1:51:42<27:53, 836.91s/it]"]},{"output_type":"stream","name":"stdout","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_28.pth\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  90%|█████████ | 9/10 [2:05:36<13:55, 835.98s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/30] | Train Loss: 0.1470 | Train Accuracy: 94.16 % | Val Loss: 0.1112 | Val Accuracy: 95.86 % | Learning Rate: 0.001000\n","Epoch [30/30] | Train Loss: 0.1437 | Train Accuracy: 94.33 % | Val Loss: 0.1099 | Val Accuracy: 96.06 % | Learning Rate: 0.001000\n"]},{"output_type":"stream","name":"stderr","text":["Training Progress: 100%|██████████| 10/10 [2:19:38<00:00, 837.84s/it]"]},{"output_type":"stream","name":"stdout","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_30.pth\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["dir_path = r\"/content/drive/MyDrive/HumanVsAI\"\n","checkpoints = os.path.join(dir_path, r\"checkpoints\")\n","model_path_for_resume_training = \"/content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_30.pth\"\n","log_file = os.path.join(dir_path, r\"log_file4.csv\")\n","loss_and_accuracy_curve_path = os.path.join(dir_path, r\"'loss_and_accuracy_curve2.png'\")"],"metadata":{"id":"9IzbNfRmcEg5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["metrics = training_and_evaluation(\n","    model=model,\n","    device=device,\n","    train_dataloader=train_dataloader,\n","    val_dataloader=val_dataloader,\n","    num_epochs=num_epochs,\n","    criterion=criterion,\n","    optimizer=optimizer,\n","    save_model_dir=checkpoints,\n","    save_every_n_epochs=2,\n","    verbose=True,\n","    log_path=log_file,\n","    checkpoint_path = model_path_for_resume_training\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9MP4WZtfcG3C","outputId":"a93c9c01-9c8d-4d39-8079-1629dc146da6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-a376c49ec411>:70: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  checkpoint = torch.load(checkpoint_path, map_location=device)\n"]},{"output_type":"stream","name":"stdout","text":["Resuming training from epoch 31...\n"]},{"output_type":"stream","name":"stderr","text":["Training Progress:  10%|█         | 1/10 [13:21<2:00:11, 801.32s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch [31/40] | Train Loss: 0.1461 | Train Accuracy: 94.17 % | Val Loss: 0.1186 | Val Accuracy: 95.52 % | Learning Rate: 0.001000\n","Epoch [32/40] | Train Loss: 0.1432 | Train Accuracy: 94.33 % | Val Loss: 0.1080 | Val Accuracy: 96.12 % | Learning Rate: 0.001000\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  20%|██        | 2/10 [26:39<1:46:36, 799.58s/it]"]},{"output_type":"stream","name":"stdout","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_32.pth\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  30%|███       | 3/10 [39:50<1:32:50, 795.74s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch [33/40] | Train Loss: 0.1415 | Train Accuracy: 94.31 % | Val Loss: 0.2031 | Val Accuracy: 91.50 % | Learning Rate: 0.001000\n","Epoch [34/40] | Train Loss: 0.1404 | Train Accuracy: 94.62 % | Val Loss: 0.1334 | Val Accuracy: 95.10 % | Learning Rate: 0.001000\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  40%|████      | 4/10 [53:10<1:19:43, 797.23s/it]"]},{"output_type":"stream","name":"stdout","text":["Model checkpoint saved: /content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_34.pth\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  50%|█████     | 5/10 [1:06:22<1:06:16, 795.24s/it]"]},{"output_type":"stream","name":"stdout","text":["Epoch [35/40] | Train Loss: 0.1405 | Train Accuracy: 94.33 % | Val Loss: 0.1464 | Val Accuracy: 94.06 % | Learning Rate: 0.001000\n"]}]},{"cell_type":"code","source":["model_path = \"/content/drive/MyDrive/HumanVsAI/checkpoints/model_epoch_34.pth\"\n","metrics = torch.load(model_path, map_location=torch.device('cpu'))['metrics']"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Fno1T71KbNjo","executionInfo":{"status":"ok","timestamp":1738149430974,"user_tz":-330,"elapsed":1633,"user":{"displayName":"KingdomOfStudy","userId":"03201092242876346295"}},"outputId":"a4186b55-4247-4e99-dd02-ff8af2023d2a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-7-5c15c96ec00d>:2: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  metrics = torch.load(model_path, map_location=torch.device('cpu'))['metrics']\n"]}]},{"cell_type":"code","source":["checkpoint = torch.load(model_path, map_location=torch.device('cpu'))\n","model.load_state_dict(checkpoint[\"model_state_dict\"])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5WruO5wRrg6K","executionInfo":{"status":"ok","timestamp":1738164812654,"user_tz":-330,"elapsed":5441,"user":{"displayName":"KingdomOfStudy","userId":"03201092242876346295"}},"outputId":"c21438e8-1a3d-4545-fb04-8554f5e884fc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-29-1cb2ce0c30c6>:1: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  checkpoint = torch.load(model_path, map_location=torch.device('cpu'))\n"]},{"output_type":"execute_result","data":{"text/plain":["<All keys matched successfully>"]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":["import json\n","json_data = json.dumps(model.model.config.to_dict(), indent=4)\n","\n","# Writing to sample.json\n","with open(os.path.join(dir_path, \"roberta_model_config.json\"), \"w\") as file:\n","    file.write(json_data)"],"metadata":{"id":"od63hU6y0XC2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss_and_accuracy_curve_path = os.path.join(dir_path, 'loss_and_accuracy_curve2.png')\n","visualize_metrics(metrics=metrics, save_path=loss_and_accuracy_curve_path, style='ggplot')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":484},"id":"QlHwUC4-xvOm","executionInfo":{"status":"ok","timestamp":1738149493368,"user_tz":-330,"elapsed":2526,"user":{"displayName":"KingdomOfStudy","userId":"03201092242876346295"}},"outputId":"6d286dd3-f3a1-43b2-8d94-6643ab9af058"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]}]}